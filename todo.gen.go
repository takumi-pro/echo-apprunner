// Package todo provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package todo

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Error error model
type Error struct {
	Code    *int    `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// Task defines model for Task.
type Task struct {
	CreatedAt   *string `json:"createdAt,omitempty"`
	Description *string `json:"description,omitempty"`
	Id          int     `json:"id"`
	Title       *string `json:"title,omitempty"`
}

// N400BadRequest error model
type N400BadRequest = Error

// N401Unauthorized error model
type N401Unauthorized = Error

// N500InternalServerError error model
type N500InternalServerError = Error

// GetTasksParams defines parameters for GetTasks.
type GetTasksParams struct {
	Empty *string `json:",omitempty"`
}

// PostTasksCreateJSONBody defines parameters for PostTasksCreate.
type PostTasksCreateJSONBody struct {
	Description *string `json:"description,omitempty"`
	Title       string  `json:"title"`
}

// PutTasksTaskIdEditJSONBody defines parameters for PutTasksTaskIdEdit.
type PutTasksTaskIdEditJSONBody struct {
	Description *string `json:"description,omitempty"`
	Title       *string `json:"title,omitempty"`
}

// PostTasksCreateJSONRequestBody defines body for PostTasksCreate for application/json ContentType.
type PostTasksCreateJSONRequestBody PostTasksCreateJSONBody

// PutTasksTaskIdEditJSONRequestBody defines body for PutTasksTaskIdEdit for application/json ContentType.
type PutTasksTaskIdEditJSONRequestBody PutTasksTaskIdEditJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetTasks request
	GetTasks(ctx context.Context, params *GetTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTasksCreateWithBody request with any body
	PostTasksCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTasksCreate(ctx context.Context, body PostTasksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTasksTaskId request
	GetTasksTaskId(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTasksTaskIdDelete request
	DeleteTasksTaskIdDelete(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTasksTaskIdEditWithBody request with any body
	PutTasksTaskIdEditWithBody(ctx context.Context, taskId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTasksTaskIdEdit(ctx context.Context, taskId string, body PutTasksTaskIdEditJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetTasks(ctx context.Context, params *GetTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTasksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksCreate(ctx context.Context, body PostTasksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTasksTaskId(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTasksTaskIdRequest(c.Server, taskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTasksTaskIdDelete(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTasksTaskIdDeleteRequest(c.Server, taskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTasksTaskIdEditWithBody(ctx context.Context, taskId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTasksTaskIdEditRequestWithBody(c.Server, taskId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTasksTaskIdEdit(ctx context.Context, taskId string, body PutTasksTaskIdEditJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTasksTaskIdEditRequest(c.Server, taskId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetTasksRequest generates requests for GetTasks
func NewGetTasksRequest(server string, params *GetTasksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Empty != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "", runtime.ParamLocationHeader, *params.Empty)
			if err != nil {
				return nil, err
			}

			req.Header.Set("", headerParam0)
		}

	}

	return req, nil
}

// NewPostTasksCreateRequest calls the generic PostTasksCreate builder with application/json body
func NewPostTasksCreateRequest(server string, body PostTasksCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTasksCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTasksCreateRequestWithBody generates requests for PostTasksCreate with any type of body
func NewPostTasksCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTasksTaskIdRequest generates requests for GetTasksTaskId
func NewGetTasksTaskIdRequest(server string, taskId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "taskId", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteTasksTaskIdDeleteRequest generates requests for DeleteTasksTaskIdDelete
func NewDeleteTasksTaskIdDeleteRequest(server string, taskId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "taskId", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/%s/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTasksTaskIdEditRequest calls the generic PutTasksTaskIdEdit builder with application/json body
func NewPutTasksTaskIdEditRequest(server string, taskId string, body PutTasksTaskIdEditJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTasksTaskIdEditRequestWithBody(server, taskId, "application/json", bodyReader)
}

// NewPutTasksTaskIdEditRequestWithBody generates requests for PutTasksTaskIdEdit with any type of body
func NewPutTasksTaskIdEditRequestWithBody(server string, taskId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "taskId", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/%s/edit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetTasksWithResponse request
	GetTasksWithResponse(ctx context.Context, params *GetTasksParams, reqEditors ...RequestEditorFn) (*GetTasksResponse, error)

	// PostTasksCreateWithBodyWithResponse request with any body
	PostTasksCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksCreateResponse, error)

	PostTasksCreateWithResponse(ctx context.Context, body PostTasksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksCreateResponse, error)

	// GetTasksTaskIdWithResponse request
	GetTasksTaskIdWithResponse(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*GetTasksTaskIdResponse, error)

	// DeleteTasksTaskIdDeleteWithResponse request
	DeleteTasksTaskIdDeleteWithResponse(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*DeleteTasksTaskIdDeleteResponse, error)

	// PutTasksTaskIdEditWithBodyWithResponse request with any body
	PutTasksTaskIdEditWithBodyWithResponse(ctx context.Context, taskId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTasksTaskIdEditResponse, error)

	PutTasksTaskIdEditWithResponse(ctx context.Context, taskId string, body PutTasksTaskIdEditJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTasksTaskIdEditResponse, error)
}

type GetTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Tasks []struct {
			CreatedAt string `json:"createdAt"`
			Id        int    `json:"id"`
			Title     string `json:"title"`
		} `json:"tasks"`
	}
	JSON400 *N400BadRequest
	JSON401 *N401Unauthorized
	JSON500 *N500InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTasksCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON500      *N500InternalServerError
}

// Status returns HTTPResponse.Status
func (r PostTasksCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTasksCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTasksTaskIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Task
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON500      *N500InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetTasksTaskIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTasksTaskIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTasksTaskIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON500      *N500InternalServerError
}

// Status returns HTTPResponse.Status
func (r DeleteTasksTaskIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTasksTaskIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTasksTaskIdEditResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON500      *N500InternalServerError
}

// Status returns HTTPResponse.Status
func (r PutTasksTaskIdEditResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTasksTaskIdEditResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetTasksWithResponse request returning *GetTasksResponse
func (c *ClientWithResponses) GetTasksWithResponse(ctx context.Context, params *GetTasksParams, reqEditors ...RequestEditorFn) (*GetTasksResponse, error) {
	rsp, err := c.GetTasks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTasksResponse(rsp)
}

// PostTasksCreateWithBodyWithResponse request with arbitrary body returning *PostTasksCreateResponse
func (c *ClientWithResponses) PostTasksCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksCreateResponse, error) {
	rsp, err := c.PostTasksCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksCreateResponse(rsp)
}

func (c *ClientWithResponses) PostTasksCreateWithResponse(ctx context.Context, body PostTasksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksCreateResponse, error) {
	rsp, err := c.PostTasksCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksCreateResponse(rsp)
}

// GetTasksTaskIdWithResponse request returning *GetTasksTaskIdResponse
func (c *ClientWithResponses) GetTasksTaskIdWithResponse(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*GetTasksTaskIdResponse, error) {
	rsp, err := c.GetTasksTaskId(ctx, taskId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTasksTaskIdResponse(rsp)
}

// DeleteTasksTaskIdDeleteWithResponse request returning *DeleteTasksTaskIdDeleteResponse
func (c *ClientWithResponses) DeleteTasksTaskIdDeleteWithResponse(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*DeleteTasksTaskIdDeleteResponse, error) {
	rsp, err := c.DeleteTasksTaskIdDelete(ctx, taskId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTasksTaskIdDeleteResponse(rsp)
}

// PutTasksTaskIdEditWithBodyWithResponse request with arbitrary body returning *PutTasksTaskIdEditResponse
func (c *ClientWithResponses) PutTasksTaskIdEditWithBodyWithResponse(ctx context.Context, taskId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTasksTaskIdEditResponse, error) {
	rsp, err := c.PutTasksTaskIdEditWithBody(ctx, taskId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTasksTaskIdEditResponse(rsp)
}

func (c *ClientWithResponses) PutTasksTaskIdEditWithResponse(ctx context.Context, taskId string, body PutTasksTaskIdEditJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTasksTaskIdEditResponse, error) {
	rsp, err := c.PutTasksTaskIdEdit(ctx, taskId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTasksTaskIdEditResponse(rsp)
}

// ParseGetTasksResponse parses an HTTP response from a GetTasksWithResponse call
func ParseGetTasksResponse(rsp *http.Response) (*GetTasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Tasks []struct {
				CreatedAt string `json:"createdAt"`
				Id        int    `json:"id"`
				Title     string `json:"title"`
			} `json:"tasks"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostTasksCreateResponse parses an HTTP response from a PostTasksCreateWithResponse call
func ParsePostTasksCreateResponse(rsp *http.Response) (*PostTasksCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTasksCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTasksTaskIdResponse parses an HTTP response from a GetTasksTaskIdWithResponse call
func ParseGetTasksTaskIdResponse(rsp *http.Response) (*GetTasksTaskIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTasksTaskIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteTasksTaskIdDeleteResponse parses an HTTP response from a DeleteTasksTaskIdDeleteWithResponse call
func ParseDeleteTasksTaskIdDeleteResponse(rsp *http.Response) (*DeleteTasksTaskIdDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTasksTaskIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutTasksTaskIdEditResponse parses an HTTP response from a PutTasksTaskIdEditWithResponse call
func ParsePutTasksTaskIdEditResponse(rsp *http.Response) (*PutTasksTaskIdEditResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTasksTaskIdEditResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Fetch All Task
	// (GET /tasks)
	GetTasks(ctx echo.Context, params GetTasksParams) error
	// Create New Task
	// (POST /tasks/create)
	PostTasksCreate(ctx echo.Context) error
	// Fetch Task by Id
	// (GET /tasks/{taskId})
	GetTasksTaskId(ctx echo.Context, taskId string) error
	// Delete Task
	// (DELETE /tasks/{taskId}/delete)
	DeleteTasksTaskIdDelete(ctx echo.Context, taskId string) error
	// Edit Task
	// (PUT /tasks/{taskId}/edit)
	PutTasksTaskIdEdit(ctx echo.Context, taskId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetTasks converts echo context to params.
func (w *ServerInterfaceWrapper) GetTasks(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTasksParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("")]; found {
		var Empty string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for , got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "", runtime.ParamLocationHeader, valueList[0], &Empty)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter : %s", err))
		}

		params.Empty = &Empty
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTasks(ctx, params)
	return err
}

// PostTasksCreate converts echo context to params.
func (w *ServerInterfaceWrapper) PostTasksCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTasksCreate(ctx)
	return err
}

// GetTasksTaskId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTasksTaskId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "taskId", runtime.ParamLocationPath, ctx.Param("taskId"), &taskId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter taskId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTasksTaskId(ctx, taskId)
	return err
}

// DeleteTasksTaskIdDelete converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTasksTaskIdDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "taskId", runtime.ParamLocationPath, ctx.Param("taskId"), &taskId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter taskId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTasksTaskIdDelete(ctx, taskId)
	return err
}

// PutTasksTaskIdEdit converts echo context to params.
func (w *ServerInterfaceWrapper) PutTasksTaskIdEdit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "taskId", runtime.ParamLocationPath, ctx.Param("taskId"), &taskId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter taskId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutTasksTaskIdEdit(ctx, taskId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/tasks", wrapper.GetTasks)
	router.POST(baseURL+"/tasks/create", wrapper.PostTasksCreate)
	router.GET(baseURL+"/tasks/:taskId", wrapper.GetTasksTaskId)
	router.DELETE(baseURL+"/tasks/:taskId/delete", wrapper.DeleteTasksTaskIdDelete)
	router.PUT(baseURL+"/tasks/:taskId/edit", wrapper.PutTasksTaskIdEdit)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RXwW8jtRf+VyL/fsdh40kyzSS3XShohQQI9lZVkWfsJM54bMf2TDKtIqEeEHCBEwjB",
	"EQE3jsAB+GPKAvtfINvJJmmmabq0HHZPcSbx5++9933vec5BKnIpOOFGg/45UERLwTVxXzoQDhKEB4pM",
	"C6KNfZQKbgh3SyQloykyVPDmRAtun+l0THJkV/9XZAj64H/NNX7T/6qbx0oJBRaLRQAw0ami0oKAPniE",
	"cOP95WGLAHRgOCg4KsxYKHpG8P0T2DptEYAIwgHlhiiO2EATVRI1IG7zvVN57I4lrPGBO7ax+mOwBHYV",
	"Ol5x2d7rKDZygQkDAZBKSKIM9UVNBSb201SSgD6w0Y2IAgGYv6aNkIyOxi4kikEfTJK5IJOZ6UGKiTs8",
	"J1qj0SaCNory0TUAw1SWRlS9WSsMSx+moYbZfZ57sIIRyYSk5hqY7qRMcNmOo6jTko7HE6Qz+/OV4BRB",
	"huCH5lB+kk7grJ2NFEYZBztVOAwkjquY62LYakWxdiDUaTWnnOZFDvphcFi6uz00JfloSNmcIbCRrMN4",
	"8DPSSjKeoWESYZ9sa12qrHVO7H9O1+l3CTws+/gsGfaGNFeTOKwsro2QD4XjtYQzAgsQgJIo7TUYPoDW",
	"QUISjiQFfdB+YB8FQCIzdsVqGqQztxoRsyviy4vfLy9+ubz48Y+fP/z7u++ffvbF09++BA5ROac9ttze",
	"IuaJg7HACuXEEKVB/+QcUAsyJgi7dK/duJ3JxeI02O56LQgPcDeZo1wyv+PYrxuh/VIiVviK+ehOtlS5",
	"LqDNbLgux4rO6WJt8V19P88YNSTXd6D/oyrKtEh5hWdM/hvpRlL0iu54GvFxom8v3ZJ0VIwYn7dyfFYr",
	"3RVgsBHk6WH6jbLY6ArrkSqLtufmdyGlUHXNphEMwyOaVdFUc7PLyFdih0BNI3/3bT/L4HWj4Ln6mlcH",
	"rp+Bh+y7Mij96Lp54/XzzamwyHOkKtAHbxKTjhsPGWss20ZdxmBieoVqVfkIFcte7y3e9BVzchV6r9V/",
	"/ebPjz/fMfl7QnuXv+6BfCmINo8Eru7ErLUW3SZ5k3P3+fYFhgrOYDmd9IYwzGet2xtqomOJWXlWShnx",
	"Gvk6rDr5Lurb4cunaa+lxjtktk/UrFSJrGg4i8NMb4n63H48xoubB9gNo+uJwwH3NIbuXNn7brMukS91",
	"D7QRNpKq4QpWO2zGMeuQbtSZcjZzEHX3EnsJAgHgKHeXp7UCVhY1qiB7by27Qmxiwohvs5urekl+8umz",
	"r77dkeQbbt+GKv0D8Kr0BB/uvn4wxZkULZi3Q3r0H5eXYOp43M+BAZDFvib2108/PPv6o93RXGw2sWNL",
	"8bbT+Q6Hpk5E1A3zOZpFePwCt9C4LY4g7HRgOm8v31Zf2floa7nPCUWB6BDqcpoxxpeZ8XBel4Vi9gXM",
	"GNlvNplIERsLbfptCCGwcqutH427re4cVmg0s2+w/wQAAP//g4V+Wp8SAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
